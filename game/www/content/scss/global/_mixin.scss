// POSITION

@function is-valid-length($value) {
    @return (type-of($value) == "number" and not unitless($value)) 
        or (index(auto initial inherit 0, $value) != null);
}

@mixin position($position, $args: ()) {
    $offsets: top right bottom left;
    position: $position;
  
    @each $offset in $offsets {
      
        $index: index($args, $offset);
        @if $index {
      
            @if $index == length($args) {

                #{$offset}: 0;
            } @else {

                $next: nth($args, $index + 1);
                @if is-valid-length($next) {

                    #{$offset}: $next;
                } @else if index($offsets, $next) {

                #{$offset}: 0;
                } @else {

                    @warn "Valore `#{$next}` non valido per l'offset `#{$offset}`.";
                }
            }
        }
    }
}

@mixin absolute($args: ()) {
  @include position(absolute, $args);
}
 
@mixin fixed($args: ()) {
  @include position(fixed, $args);
}
 
@mixin relative($args: ()) {
  @include position(relative, $args);
}

// DISPLAY FLEX
@mixin flex($args: ()) {
    display: -webkit-flex;
    display:         flex;
    -webkit-justify-content: nth($args, 1);
            justify-content: nth($args, 1);
    @if(length($args) == 2) {
        -webkit-flex-wrap: nth($args, 2);
                flex-wrap: nth($args, 2);
    }
    @if(length($args) == 3) {
        -webkit-align-items: nth($args, 3);
                align-items: nth($args, 3);
    }
}

// MEDIA QUERY

@mixin device($dev) {
    @each $row in $device {
        @if(nth($row, 2) == $dev) {
            @if(nth($row, 3) == 0) {
                @media 
                    (min-device-pixel-ratio: 2) and (min-device-width: #{nth($row, 4)*2px}),
                    (min-device-width: #{nth($row, 4)*1px}) { @content; }
            } @elseif(length($row) == 3) {
                @media 
                    (min-device-pixel-ratio: 2) and (max-device-width: #{nth($row, 3)*2px}),
                    (max-device-width: #{nth($row, 3)*1px}) { @content; }
            } @else {
                @media 
                    (min-device-pixel-ratio: 2) and (max-device-width: #{nth($row, 3)*2px}) and (min-device-width: #{nth($row, 4)*2px}),
                    (max-device-width: #{nth($row, 3)*1px}) and (min-device-width: #{nth($row, 4)*1px}) { @content; }
            }
        }
    }
}

// PREFIX

@mixin prefix($prop, $args: ()) {
    -webkit-#{$prop}: #{$args};
    -moz-#{$prop}: #{$args};
    -o-#{$prop}: #{$args};
    #{$prop}: #{$args};
}

// KEYFRAMES

@mixin keyframes($animation-name) {
    @-webkit-keyframes #{$animation-name} {
        @content;
    }
    @-moz-keyframes #{$animation-name} {
        @content;
    }  
    @-ms-keyframes #{$animation-name} {
        @content;
    }
    @-o-keyframes #{$animation-name} {
        @content;
    }  
    @keyframes #{$animation-name} {
        @content;
    }
}